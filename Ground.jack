class Ground {
  field Array levels;
  field int baseHeight, xincrement;
  field int tank1x, tank1y, tank2x, tank2y;
  field boolean boom;
  field Random random;

  constructor Ground new(int seed) {
    let levels = Array.new(20);
    let baseHeight = 5;
    let xincrement = 25;
    let boom = false;
    let random = Random.new(seed, 200);
    return this;
  }

  method void terraForm() {
    var int i;
    let i = 0;

    while (i < 20) {
        let levels[i] = random.nextInt() + 20;
        let i = i + 1;
    }
    let levels[3] = levels[2];

    let tank1y = 256 - levels[2] - 10 - baseHeight;
    let tank2y = 256 - levels[17] - 10 - baseHeight;
    let boom = false;
    return;
  }

  method void dispose() {
     do random.dispose();
     do Memory.deAlloc(this);
     return;
  }

  method void draw() {
    var int i;
    var int x1, y1, x2, y2;
    do Screen.setColor(true);

    let i = 0;
    while (i < 20) {
      let x1 = i * xincrement;
      let x2 = x1 + xincrement;
      let y1 = 256 - baseHeight - levels[i];
      let y2 = 256 - baseHeight;
      do Screen.drawRectangle(x1, y1, x2, y2);
      let i = i + 1;
    }

    return;
  }

  method int getFreeHeight(int x) {
    var int i;
    let i = x / xincrement;
    if (x > 500) {
      return 0;
    }
    return (256 - baseHeight - levels[i]);
  }

  method void drawTanks() {
    var int size;
    let size = 10;
    do Screen.setColor(true);
    do Screen.drawCircle(67,tank1y, size);
    do Screen.drawCircle(437, tank2y, size);
    do Screen.setColor(false);
    do Screen.drawCircle(67,tank1y, size - 5);
    do Screen.drawCircle(437, tank2y, size - 5);
    return;
  }

  method void explode(int x0) {
    var int i;
    let i = ((x0 + 5) / xincrement);
    let levels[i] = levels[i] - 20;
    if (levels[i] < 0) {
      let levels[i] = 0;
    }
    if (i = 17) {
      let boom = true;
    }
    return;
  }

  method int getTank1X() {
    return 67;
  }

  method int getTank1Y() {
    return tank1y;
  }

  method boolean isEnemyDestroyed() {
    return boom;
  }
}
